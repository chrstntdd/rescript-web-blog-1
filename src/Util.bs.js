// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_math from "rescript/lib/es6/js_math.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

function remainder_float(a, b) {
  return (a % b);
}

function random_int_reduce(min, max) {
  var range = max - min + 1;
  var bytes_needed = Js_math.ceil_int(Math.log2(range) / 8);
  var cutoff = Math.floor(Math.pow(256, bytes_needed) / range) * range;
  var bytes = new Uint8Array(bytes_needed);
  var loop = function (_param) {
    while(true) {
      var value = crypto.getRandomValues(bytes).reduce((function (acc, curr, i) {
              return acc + curr * Math.pow(256, i);
            }), 0);
      if (value < cutoff) {
        return value;
      }
      _param = undefined;
      continue ;
    };
  };
  var value = loop(undefined);
  return min + remainder_float(value, range);
}

var DivisionByZero = /* @__PURE__ */Caml_exceptions.create("Util.DivisionByZero");

function remainder_float_exn(dividend, divisor) {
  if (divisor === 0) {
    throw {
          RE_EXN_ID: DivisionByZero,
          hey: "ðŸ‘‹",
          Error: new Error()
        };
  }
  return remainder_float(dividend, divisor);
}

function accumulate_uint8_entries(ta) {
  var last_index = ta.length - 1 | 0;
  var _acc = 0;
  var _i = 0;
  while(true) {
    var i = _i;
    var acc = _acc;
    if (i === last_index) {
      return acc;
    }
    var curr = ta[i];
    var acc$1 = acc + curr * Math.pow(256, i);
    _i = i + 1 | 0;
    _acc = acc$1;
    continue ;
  };
}

function random_int_rec(min, max) {
  var range = max - min + 1;
  var bytes_needed = Js_math.ceil_int(Math.log2(range) / 8);
  var cutoff = Math.floor(Math.pow(256, bytes_needed) / range) * range;
  var bytes = new Uint8Array(bytes_needed);
  var loop = function () {
    while(true) {
      var value = accumulate_uint8_entries(crypto.getRandomValues(bytes));
      if (value < cutoff) {
        return value;
      }
      continue ;
    };
  };
  var dividend = loop();
  return min + remainder_float_exn(dividend, range);
}

function random_int_no_loop(min, max) {
  var range = Math.abs(max - min) + 1;
  var dividend = crypto.getRandomValues(new Uint32Array(1))[0];
  return min + remainder_float_exn(dividend, range);
}

export {
  remainder_float ,
  random_int_reduce ,
  DivisionByZero ,
  remainder_float_exn ,
  accumulate_uint8_entries ,
  random_int_rec ,
  random_int_no_loop ,
}
/* No side effect */
